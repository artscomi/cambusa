// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



model User {
  id                 String            @id @default(cuid())
  clerkUserId        String            @unique // Store Clerk user ID
  name               String
  email              String            @unique
  ownedGroups        Group[]           @relation("GroupOwner")
  memberships        GroupMembership[] // Relation to the groups the user is a member of
  foodPreferences    FoodPreference[] // Food preferences of the user
  alcoholPreferences AlcoholPreference[] // Alcohol preferences of the user
  waterPreferences   WaterPreference[] // Water preferences of the user
  apiCallCount       Int               @default(0)
  hasPaidForIncrease Boolean           @default(false)
  lastApiCall        DateTime?
  mealList           String            @default("[]")
  sharedLists        SharedIngredientList[] // Lists created by this user
}

model Group {
  id                 String            @id @default(cuid())
  name               String
  ownerId            String
  owner              User              @relation("GroupOwner", fields: [ownerId], references: [clerkUserId])
  members            GroupMembership[]
  foodPreferences    FoodPreference[]
  alcoholPreferences AlcoholPreference[]
  waterPreferences   WaterPreference[]
  breakfast          String @default("0")
  lunch              String
  dinner             String
  people             String
  sameBreakfast      Boolean @default(false)
  sharedLists        SharedIngredientList[] // Lists shared in this group
}

model FoodPreference {
  id         String @id @default(cuid())
  userId     String
  user       User   @relation(fields: [userId], references: [clerkUserId])
  groupId    String
  group      Group  @relation(fields: [groupId], references: [id])
  preference String
}

model AlcoholPreference {
  id         String @id @default(cuid())
  userId     String
  user       User   @relation(fields: [userId], references: [clerkUserId])
  groupId    String
  group      Group  @relation(fields: [groupId], references: [id])
  preference String
}

model WaterPreference {
  id         String @id @default(cuid())
  userId     String
  user       User   @relation(fields: [userId], references: [clerkUserId])
  groupId    String
  group      Group  @relation(fields: [groupId], references: [id])
  preference String
}

model GroupMembership {
  id      String @id @default(uuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // Ensures a user can only join a group once
}

model SharedIngredientList {
  id          String                @id @default(cuid())
  name        String
  description String?
  groupId     String?               // Opzionale
  group       Group?                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdBy   String
  creator     User                  @relation(fields: [createdBy], references: [clerkUserId])
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  items       SharedIngredientItem[]
  isActive    Boolean               @default(true)
}

model SharedIngredientItem {
  id          String   @id @default(cuid())
  item        String
  quantity    Int
  unit        String
  isCompleted Boolean  @default(false)
  completedBy String?
  completedAt DateTime?
  listId      String
  list        SharedIngredientList @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  totalVotes  Int      @default(0)
  
  // Relazione con i voti
  votes       SharedIngredientItemVote[]
}

model SharedIngredientItemVote {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  vote      Boolean  // true = positivo, false = negativo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazione con l'item
  item      SharedIngredientItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
}
